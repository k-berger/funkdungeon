; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 137
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 190
; CursorColumn    = 18
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max BlitzFont   = 1
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
NoCli
BitMap 0,320,256,6
BitMap 1,320,256,6
BitMap 2,320,256,6

AMIGA

NEWTYPE .vec2
  x.q
  y.q
End NEWTYPE

NEWTYPE .character
  pos.vec2
End NEWTYPE




LoadBitMap 0,"amiga:funkdungeon/vania_shapes.pic",0
Use BitMap 0
; Get tiles
#TILE_WIDTH = 22
;We draw the tiles closer to one another, so the planes look better
#HALFTILE_W = 10
#HALFTILE_H = 5

#TILE_HEIGHT = 14
#OFFSETX = 28
#OFFSETY = 14

#TILES = 12
#XOFFSET = 250 - (10 * #TILES )
#YOFFSET = 60

For y = 0 To 2
 GetaShape y, #OFFSETX ,#OFFSETY + (y * #TILE_HEIGHT) + y,#TILE_WIDTH,#TILE_HEIGHT
Next

Gosub cutfont


;GetaShape 0,13,29,30,30


BLITZ

Dim level.w (10,10)
SHARED level
bitm = 0

Statement InitLevel{}
Show 1
 Use BitMap  1
 For z = 0 To #TILES - 1
   For x = 0 To #TILES  - 1
     Blit level(x,z),#XOFFSET + (#HALFTILE_W * x) - (z * #HALFTILE_W), 60 + (#HALFTILE_H * x) + (z * #HALFTILE_H)
   Next
 Next
 GetaShape 24, 0,0,319,255
End Statement


Statement DrawLevel{}
  Blit 24,0,0

End Statement

Statement SchranzText {text.s}
For c = 1 To Len(text)
 sindex = Asc(Mid$(text,c,1)) - 65
 If sindex < 26
 Blit 3 + sindex,50 + c * 6,30
 EndIf
Next
End Statement

Statement DrawCharacter {posx, posy}
  xc = #XOFFSET + (#HALFTILE_W * posx) - (posy * #HALFTILE_W)
  yc = #YOFFSET + (#HALFTILE_H * posx) + (posy * #HALFTILE_H)

  Circlef xc,yc,6,6,3

End Statement

InitCopList 0,44,200,$10008,0,64,0
DisplayPalette 0,0
CreateDisplay 0
DisplayBitMap 0,0
Use BitMap 1

Restore leveldata
For x = 0 To #TILES - 1
 For y = 0 To #TILES - 1
  Read level(x,y)
 Next
Next


ando.character\pos\x = 4
ando.character\pos\y = 4

InitLevel{}

DrawLevel {}
SchranzText {"HALLO"}
DrawCharacter{ando\pos\x, ando\pos\y}

BlitzKeys On


; DA GAME LOOP
#KEY_UP = $4c
#KEY_DOWN = $4d
#KEY_LEFT = $4f
#KEY_RIGHT = $4e
#KEY_NONE = 0
bitm = 0
BitMapOutput 1
BitMapOutput 2

lastkey = #KEY_NONE
keyheld = False

Repeat
 DrawLevel{}

 If RawStatus(#KEY_RIGHT) = -1 AND lastkey <> #KEY_RIGHT
   ando\pos\x = ando\pos\x + 1
   lastkey = #KEY_RIGHT
   keyheld = True
 EndIf
 If RawStatus(#KEY_LEFT) = -1 AND lastkey <> #KEY_LEFT
   ando\pos\x = ando\pos\x - 1
   lastkey = #KEY_LEFT
   keyheld = True
 EndIf
 If RawStatus(#KEY_UP) = -1   AND lastkey <> #KEY_UP
  ando\pos\y = ando\pos\y - 1
  lastkey = #KEY_UP
  keyheld = True
 EndIf
 If RawStatus(#KEY_DOWN) = -1 AND lastkey <> #KEY_DOWN
   ando\pos\y = ando\pos\y + 1
   lastkey = #KEY_DOWN
   keyheld = True
 EndIf

 If RawStatus(#KEY_UP) = 0 AND RawStatus(#KEY_DOWN) = 0 AND RawStatus(#KEY_RIGHT) = 0 AND RawStatus(#KEY_LEFT) = 0
  lastkey = #KEY_NONE
 EndIf

 DrawCharacter{ando\pos\x, ando\pos\y}
 Locate 2,2
 Print ando\pos\x, ando\pos\y
 ;Gosub doubleBuf
 VWait
Until Joyb(0)
End

leveldata :
Data.w  0,0,0,0,0,0,0,0,0,0,0,0
Data.w  0,0,0,0,0,0,0,0,0,0,0,0
Data.w  0,0,2,2,2,2,2,2,0,0,0,0
Data.w  0,0,2,1,1,1,1,2,0,0,0,0
Data.w  0,0,2,1,1,1,1,2,0,0,0,0
Data.w  0,0,2,1,1,1,1,2,0,0,0,0
Data.w  0,0,2,2,2,2,2,2,0,0,0,0
Data.w  0,0,0,0,0,0,0,0,0,0,0,0
Data.w  0,0,0,0,0,0,0,0,0,0,0,0
Data.w  0,0,0,0,0,0,0,0,0,0,0,0
Data.w  0,0,0,0,0,0,0,0,0,0,0,0
Data.w  0,0,0,0,0,0,0,0,0,0,0,0

leveltext :
Data.s "Hello world"

cutfont :
#FONT_HEIGHT = 8
#FONT_WIDTH = 5

For n = 0 To 25
GetaShape 3 + n,28 + (n * #FONT_WIDTH) + n,125, #FONT_WIDTH, #FONT_HEIGHT
Next

Return


.doubleBuf:
 DisplayBitMap 0,bitm + 1

 bitm = 1 - bitm
 Use BitMap bitm + 1
 Cls
Return

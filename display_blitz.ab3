; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 365
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 58
; CursorColumn    = 56
; LabelSearch     = "shape_sh"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max BlitzFont   = 1
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; Parts of the code in this file require BLITZ mode. Please only include
; when you switched to BLITZ

XINCLUDE "constants.ab3"

Statement Display_InitDisplay{}
  InitCopList 0,#DISP_TOP,#DISP_FIRST_HEIGHT,$10006,0,64,0
  DisplayPalette 0,0
  DisplayBitMap 0,#TOP_BITMAP

  InitCopList 1, #DISP_GAMESTAGE_TOP,#DISP_GAMESTAGE_HEIGHT ,$10006,0,64,0
  DisplayPalette 1,0
  DisplayBitMap 1,1

  InitCopList 2, #DISP_BOTTOM_TOP, #DISP_BOTTOM_HEIGHT ,$10006,0,64,0
  DisplayPalette 2,0
  DisplayBitMap 2,4

  CreateDisplay 0,1,2


End Statement

Statement Display_DrawCharacter {posx, posy, bitm}
; draws the avatar onto the playfield. This could be refactored into the DrawLevel statement
; to avoid another stack level
  ; SHARED tileCoords()
  BBlit bitm, #CHAR_SHAPE_MIN, posx + 4 ,posy - 1  - (#CHAR_HEIGHT) / 2
End Statement

Statement Display_DrawItems {bitm}
SHARED tileCoords()
; draws the avatar onto the playfield. This could be refactored into the DrawLevel statement
; to avoid another stack level
  ; SHARED tileCoords()
;  BBlit bitm, #INV_SHAPES_MIN , tileCoords(1,6)\x, tileCoords(1,6)\z - 4
;  BBlit bitm, #INV_SHAPES_MIN , tileCoords(2,6)\x, tileCoords(2,6)\z  - 4
;  BBlit bitm, #INV_SHAPES_MIN , tileCoords(3,6)\x, tileCoords(3,6)\z  - 4
;  BBlit bitm, #INV_SHAPES_MIN , tileCoords(4,6)\x, tileCoords(4,6)\z  - 4
;  BBlit bitm, #INV_SHAPES_MIN , tileCoords(5,6)\x, tileCoords(5,6)\z  - 4
;  BBlit bitm, #INV_SHAPES_MIN , tileCoords(6,6)\x, tileCoords(6,6)\z  - 4
End Statement

Statement Display_DrawWireWall{x,z}
SHARED tileCoords(), level()

        Line tileCoords(x,z)\x, tileCoords(x,z)\z-10, tileCoords(x+1,z)\x, tileCoords(x+1,z)\z-10,19
        Line tileCoords(x+1,z)\x, tileCoords(x+1,z)\z-10, tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z-10,19
        Line tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z-10, tileCoords(x,z+1)\x, tileCoords(x,z+1)\z-10,19
        Line tileCoords(x,z+1)\x, tileCoords(x,z+1)\z-10, tileCoords(x,z)\x, tileCoords(x,z)\z-10,19

        If x = #TILES-2
          Line tileCoords(x+1,z)\x, tileCoords(x+1,z)\z-10, tileCoords(x+1,z)\x, tileCoords(x+1,z)\z,19
          Line tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z, tileCoords(x+1,z)\x, tileCoords(x+1,z)\z,19
        Else
          If level(x+1,z)<3 OR level(x,z+1)>5
             Line tileCoords(x+1,z)\x, tileCoords(x+1,z)\z-10, tileCoords(x+1,z)\x, tileCoords(x+1,z)\z,19
            Line tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z, tileCoords(x+1,z)\x, tileCoords(x+1,z)\z,19
          EndIf
        EndIf

        Line tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z-10, tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z,19

        If z = #TILES - 2
          Line tileCoords(x,z+1)\x, tileCoords(x,z+1)\z-10, tileCoords(x,z+1)\x, tileCoords(x,z+1)\z,19
          Line tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z, tileCoords(x,z+1)\x, tileCoords(x,z+1)\z,19
        Else
           If level(x,z+1)<3  OR level(x,z+1)>5
             Line tileCoords(x,z+1)\x, tileCoords(x,z+1)\z-10, tileCoords(x,z+1)\x, tileCoords(x,z+1)\z,19
             Line tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z, tileCoords(x,z+1)\x, tileCoords(x,z+1)\z,19
           EndIf
        EndIf
End Statement

 Statement Display_DrawWireTile{x,z,c}
  SHARED tileCoords()

        Line tileCoords(x,z)\x, tileCoords(x,z)\z, tileCoords(x+1,z)\x, tileCoords(x+1,z)\z,c
        Line tileCoords(x+1,z)\x, tileCoords(x+1,z)\z, tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z,c
        Line tileCoords(x+1,z+1)\x, tileCoords(x+1,z+1)\z, tileCoords(x,z+1)\x, tileCoords(x,z+1)\z,c
        Line tileCoords(x,z+1)\x, tileCoords(x,z+1)\z, tileCoords(x,z)\x, tileCoords(x,z)\z,c
End Statement

Statement Display_DrawLevel{rposx, rposy, posx, posy, bitm}
  SHARED level(), tileCoords()

  For z=0 To #TILES-2
    For x=0 To #TILES-2
    Select level(x,z)
      Case 0:
       ; normal floor tile
       Display_DrawWireTile{x,z,5}
      Case 1:
       Display_DrawWireTile{x,z,16}
      Case 2:
       Display_DrawWireTile{x,z,9}
      Case 3:
       Display_DrawWireWall{x,z}
      Case 4:
        Display_DrawWireWall{x,z}
      Case 5:
        Display_DrawWireWall{x,z}
      End Select
    Next

  Next

Circlef tileCoords(posx, posy)\x, tileCoords(posx, posy)\z+8, 3, 7

End Statement

Statement Display_DrawLevel2{rposx, rposy,posx, posy, bitm}
  ; arguments: x-position and y-position of character (real and matrix)
  ;            bitmap to draw on
  ; drawing the level consists of
  ;  - drawing floor-tiles (immutable, pre-rendered per room in InitLevel)
  ;  - drawing high tiles (walls, doorways, ...)
  ;  - drawing character, enemies and items at the right time (ordering is important for "depth")
  SHARED level(),tileCoords()
  UnBuffer bitm

  For z = 0 To #TILES - 1
    For x = 0 To #TILES  - 1
      If x = posx AND z = posy
        Display_DrawCharacter{rposx,rposy, bitm}
      EndIf
      If level (x,z) > = 3
        BBlit bitm, level(x,z), tileCoords(x,z)\x , tileCoords(x,z)\z
      EndIf
    Next
  Next
  BBlit bitm, #MOUSE_SHAPE_INDEX, MouseX, MouseY
  Display_DrawItems{bitm}
End Statement

; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 421
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 130
; CursorColumn    = 55
; LabelSearch     = "shape_sh"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max BlitzFont   = 1
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; internal handling of the level
XINCLUDE "types.ab3"
#WORLD_BITMAP = 5

#WORLDMAP_XOFFSET = 70
#WORLDMAP_YOFFSET = 70

worldTileX.w = #WORLDMAP_XOFFSET
worldTileY.w = #WORLDMAP_YOFFSET

#LEVELTILE_W = 9
#LEVELTILE_H = 9

Statement Level_PrepareWorld{}
  BitMap #WORLD_BITMAP, 320,200,6
  LoadBitMap #WORLD_BITMAP, "amiga:funkdungeon/vania_world.pic",1
End Statement

Statement Level_LoadMap{}
  SHARED level()
  SHARED worldTileX, worldTileY


  Use BitMap #WORLD_BITMAP

  For y = 0 To #LEVELTILE_H - 1
    For x = 0 To #LEVELTILE_W - 1
      level(x,y) = Point (worldTileX + x, worldTileY + y) - 1
    Next
  Next

End Statement

Function.w Level_CanMoveTo{posx, posy}
; determine whether the character can move to the coordinates passed
; we obviously can't walk over water/acid/lava or through brickwalls
  SHARED level()
  ; are we leaving the room?
  If (posx < 0)
    If level(posx + 1, posy) = 6
      Function Return - 1
    EndIf
  EndIf

  If (posx  = #TILES)
    If level(posx - 1, posy) = 6
     Function Return - 1
    EndIf
  EndIf

  If (posy < 0)
    If level(posx, posy + 1) = 6
      Function Return - 1
    EndIf
  EndIf

  If (posy = #TILES)
    If level(posx, posy - 1 ) = 6
      Function Return - 1
    EndIf
  EndIf

  ; make sure to not cross the playfield
  If (posx < 0 OR posx > #TILES - 1)
    Function Return 0
  EndIf

  If posy < 0 OR posy > #TILES - 1
    Function Return 0
  EndIf

  ; make sure the target position isn't taken by something we can't pass
  If level(posx, posy) = 1 OR level(posx,posy) = #SHAPE_COLUMN OR level(posx,posy) = #SHAPE_WALL_H OR level(posx,posy) = #SHAPE_WALL_W
    Function Return 0
  EndIf

  Function Return - 1
End Function
Statement Level_MoveTo{x,y}
  SHARED worldTileX, worldTileY

  worldTileX = #WORLDMAP_XOFFSET + (x * #LEVELTILE_W)
  worldTileY = #WORLDMAP_YOFFSET + (y * #LEVELTILE_H)
  Level_LoadMap{}
End Statement

Statement Level_MoveBetweenRooms{charposx, charposz, dwx, dwy}
  SHARED ando, worldposX, worldposY
  BLITZ

  ando\matrixpos\z = charposz
  ando\matrixpos\x = charposx
  worldposY = worldposY + dwy
  worldposX = worldposX + dwx

  Level_MoveTo{worldposX, worldposY}
  Display_InitLevel{}

End Statement

Statement Level_CheckRoomBoundariesAndMove{}
  SHARED ando, worldposX, worldposY
  If ando\matrixpos\x < 0
    Level_MoveBetweenRooms{#TILES - 1, ando\matrixpos\z, - 1,0}
    BLITZ
    Statement Return
  EndIf

  If ando\matrixpos\x > = #TILES
    Level_MoveBetweenRooms{0, ando\matrixpos\z,1,0}
    BLITZ
    Statement Return
  EndIf

  If ando\matrixpos\z < 0
    Level_MoveBetweenRooms{ando\matrixpos\x, #TILES - 1,0, - 1}
    BLITZ
    Statement Return
  EndIf

  If ando\matrixpos\z > = #TILES
    Level_MoveBetweenRooms{ando\matrixpos\x, 0, 0, 1}
    BLITZ
    Statement Return
  EndIf
End Statement


Statement HighlightTile{x.w, y.w}
  ; We need the tiles coordinates array here to search
  SHARED tileCoords()

  ;try to find the tile that is drawn on the coordinates
End Statement






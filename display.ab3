; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 363
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 87
; CursorColumn    = 27
; LabelSearch     = "shape_sh"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max BlitzFont   = 1
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; ******************************************
; *   VANIA PLAYFIELD MANAGEMENT INCLUDE   *
; ******************************************
; * Contains Functions and Statements for  *
; * - Setting up Display (bitmaps, slices) *
; * - in-mem representation of levels      *
; * - drawing the playfield                *
; ******************************************
XINCLUDE "constants.ab3"
XINCLUDE "types.ab3"



#DISP_TOP = 44
#DISP_FIRST_HEIGHT = 30

#DISP_BOTTOM_HEIGHT = 30
#DISP_GAMESTAGE_HEIGHT = 256 - #DISP_FIRST_HEIGHT - #DISP_BOTTOM_HEIGHT
#DISP_GAMESTAGE_TOP = #DISP_TOP + #DISP_FIRST_HEIGHT + 3
#DISP_BOTTOM_TOP = #DISP_GAMESTAGE_TOP + #DISP_GAMESTAGE_HEIGHT + 3

#XOFFSET = 295 - (#HALFTILE_W * #TILES )
#YOFFSET = 5

SHARED bitm.w
bitm = 0

; the level array will hold the shape-ids to blit for each tile on the visible room
Dim level.w (#TILES,#TILES)


; we use a lookup table for isometric coordinates, as that prevents us from calculating over
; and over and over and over again (anything that gets projected as part of double-buffering is
; based on that grid, so we better keep it somewhere

Dim tileCoords.vec2 (#TILES, #TILES)

Statement Display_PrecalcTileCoords{}
SHARED tileCoords()
For x = 0 To #TILES - 1
  For z = 0 To #TILES  - 1
    tileCoords(x,z)\x = #XOFFSET + (#HALFTILE_W * x) - (z * #HALFTILE_W)
    tileCoords(x,z)\z = #YOFFSET + (#HALFTILE_H * x) + (z * #HALFTILE_H)
  Next
Next
End Statement


Statement Display_CreateBitmaps{}
BitMap #TOP_BITMAP,320,44,6
BitMap 1,320,200,6
BitMap 2,320,200,6
BitMap #LOWER_BITMAP,320,40,6
End Statement

Statement Display_DoubleBuffer{}
  DisplayBitMap 1,bitm + 1
  bitm = 1 - bitm
  Use BitMap bitm + 1
End Statement

Statement Display_Debug{text.s}
  BitMapOutput #LOWER_BITMAP
  Locate 1,1
  Print text
End Statement

Statement Display_LoadLevel{}
  SHARED level()
  Restore leveldata

  For x = 0 To #TILES - 1
    For z = 0 To #TILES - 1
      Read level(x,z)
    Next
  Next

.leveldata :
  Data.w 0,0,0,0,0,0,0,0,0
  Data.w 0,0,0,0,0,0,0,0,0
  Data.w 0,0,0,0,0,0,0,0,0
  Data.w 0,1,1,1,1,1,1,0,0
  Data.w 0,1,1,1,1,1,1,0,0
  Data.w 0,0,0,0,0,0,0,0,0
  Data.w 0,0,1,1,1,0,0,0,0
  Data.w 0,0,1,2,1,0,0,0,0
  Data.w 0,0,1,1,1,0,0,0,0
End Statement

Statement Display_InitLevel{}
  SHARED level(), tileCoords()
  Use BitMap  1
  For x = 0 To #TILES - 1
    For z = 0 To #TILES  - 1
      If level (x,z) < 3
        Blit level(x,z), tileCoords(x,z)\x, tileCoords(x,z)\z
      Else
        Blit 0, tileCoords(x,z)\x, tileCoords(x,z)\z
      EndIf
     Next
  Next
  GetaShape #RENDERED_LEVEL_SHAPE, 0,0,320,192
  Cls

; blit the ground-tiles on both double-buffer bitmaps so we can
; restore the background with BBlit/Unbuffer nicely
  Use BitMap 1
  Blit #RENDERED_LEVEL_SHAPE,0,0
  Use BitMap 2
  Blit #RENDERED_LEVEL_SHAPE,0,0
End Statement

Function.q Display_GetTileCoordsX{x,z}
  SHARED tileCoords()
  Function Return tileCoords(x,z)\x
End Function

Function.q Display_GetTileCoordsZ{x,z}
  SHARED tileCoords()
  Function Return tileCoords(x,z)\z
End Function

Function.w CanMoveTo{posx, posy}
; determine whether the character can move to the coordinates passed
; we obviously can't walk over water/acid/lava or through brickwalls
  SHARED level()
  ; make sure to not cross the playfield
  If posx < = 0 OR posx > #TILES - 1
    Function Return 0
  EndIf

  If posy < = 0 OR posy > #TILES - 1
    Function Return 0
  EndIf

  ; make sure the target position isn't taken by something we can't pass
  If level(posx, posy) = 1 OR level(posx,posy) = #SHAPE_COLUMN OR level(posx,posy) = #SHAPE_WALL_H
    Function Return 0
  EndIf

  Function Return - 1
End Function




